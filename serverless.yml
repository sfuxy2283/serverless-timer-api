# NOTE: update this with your service name
service: serverless-timer-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-timers
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # serverless-webpack configuration
  # Enable auto-packing of external modules
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: ap-northeast-2
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [TimersTable, Arn]

functions:
  get:
    handler: get.main
    events:
      - http:
          path: timers
          method: get
          cors: true
          authorizer: aws_iam
  create:
    handler: create.main
    events:
      - http:
          path: timers
          method: post
          cors: true
          authorizer: aws_iam
  update:
    handler: update.main
    events:
      - http:
          path: timers/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: delete.main
    events:
      - http:
          path: timers/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  start:
    handler: start.main
    events:
      - http:
          path: timers/{id}/start
          method: put
          cors: true
          authorizer: aws_iam
  stop:
    handler: stop.main
    events:
      - http:
          path: timers/{id}/stop
          method: put
          cors: true
          authorizer: aws_iam

# Create resources with separate CloudFormation templates
resources:
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
